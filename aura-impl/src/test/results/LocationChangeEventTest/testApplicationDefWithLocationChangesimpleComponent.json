{
  "serId":1,
  "value":{
    "componentDef":{
      "serId":2,
      "value":{
        "descriptor":"markup://test:test_LocChng_SimpleComponent",
        "controllerDef":{
          "serId":3,
          "value":{
            "descriptor":"compound://test.test_LocChng_SimpleComponent",
            "actionDefs":[
              {
                "serId":4,
                "value":{
                  "descriptor":"js://test.test_LocChng_SimpleComponent/ACTION$clientAction",
                  "name":"clientAction",
                  "code":
function(cmp, event) {
        
        if(cmp===$A.getRoot()){
            
            
            var num = $A.historyService.get().num;
            
            if(num){
                $A.historyService.set("ButtonClickedSimpleComponent?num="+((num*1)+1));
            }else{
                $A.historyService.set("ButtonClickedSimpleComponent?num=1");
            }
        }else{
            
            var locator = $A.historyService.get().locator;
            
            if(locator){
                $A.historyService.set("ButtonClickedSimpleComponent?locator="+((locator*1)+1));
            }else{
                $A.historyService.set("ButtonClickedSimpleComponent?locator=1");
            }
        }
    },
                  "actionType":"CLIENT"
                }
              },
              {
                "serId":5,
                "value":{
                  "descriptor":"js://test.test_LocChng_SimpleComponent/ACTION$locationChange",
                  "name":"locationChange",
                  "code":
function(cmp, event) {
        
        if(event.getParam('num')){
            
            
            var button = cmp.find("button");
            if(button){
                button.getAttributes().setValue('label','test_LocChng_SimpleComponent#test:test_LocChng_Event');
            }
        }
    },
                  "actionType":"CLIENT"
                }
              },
              {
                "serId":6,
                "value":{
                  "descriptor":"js://test.test_LocChng_SimpleComponent/ACTION$locationChangeComposite",
                  "name":"locationChangeComposite",
                  "code":
function(cmp, event) {
    
        if(event.getParam('locator')){
            
            var button = cmp.find("button");
            if(button){
                button.getAttributes().setValue('label','test_LocChng_SimpleComponent#test:test_LocChng_Event2');
            }
        }
    },
                  "actionType":"CLIENT"
                }
              },
              {
                "serId":7,
                "value":{
                  "descriptor":"js://test.test_LocChng_SimpleComponent/ACTION$locationChangeGeneric",
                  "name":"locationChangeGeneric",
                  "code":
function(cmp, event) {
    
        if(event.getParam('num')){
            var button = cmp.find("button");
            if(button){
                button.getAttributes().setValue('label','test_LocChng_SimpleComponent#aura:locationChange');
            }
        }
    },
                  "actionType":"CLIENT"
                }
              }
            ]
          }
        },
        "superDef":{
          "serId":8,
          "value":{
            "descriptor":"markup://aura:application",
            "rendererDef":{
              "serId":9,
              "value":{
                "descriptor":"js://aura.component",
                "render":
function(component) {
        var body = component.getValue("v.body");
        var rendering = component.getRendering();
        return rendering ? rendering : $A.render(body);
    },
                "afterRender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.afterRender(body);
    },
                "rerender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.rerender(body);
    },
                "unrender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.unrender(body);

        var elements = component.getElements();
        for (var key in elements){
            var element = elements[key];
            delete elements[key];
            aura.util.removeElement(element);
        }
    }
              }
            },
            "attributeDefs":[
              {
                "serId":10,
                "value":{
                  "descriptor":"body",
                  "typeDefDescriptor":"aura://Aura.Component[]",
                  "required":false,
                  "visibility":"PUBLIC"
                }
              }
            ],
            "interfaces":[
              "markup://aura:rootComponent"
            ],
            "isAbstract":true,
            "locationChangeEventDef":{
              "serId":11,
              "value":{
                "descriptor":"markup://aura:locationChange",
                "type":"APPLICATION",
                "superDef":{
                  "serId":12,
                  "value":{
                    "descriptor":"markup://aura:applicationEvent",
                    "type":"APPLICATION",
                    "attributes":{

                    }
                  }
                },
                "attributes":{
                  "token":{
                    "serId":13,
                    "value":{
                      "descriptor":"token",
                      "typeDefDescriptor":"aura://String",
                      "required":false,
                      "visibility":"PUBLIC"
                    }
                  }
                }
              }
            }
          }
        },
        "attributeDefs":[
          {
            "serRefId":10
          }
        ],
        "handlerDefs":[
          {
            "serId":14,
            "value":{
              "eventDef":{
                "serId":15,
                "value":{
                  "descriptor":"markup://test:test_LocChng_Event",
                  "type":"APPLICATION",
                  "superDef":{
                    "serRefId":11
                  },
                  "attributes":{
                    "customAttribute":{
                      "serId":16,
                      "value":{
                        "descriptor":"customAttribute",
                        "typeDefDescriptor":"aura://String",
                        "required":false,
                        "visibility":"PUBLIC"
                      }
                    },
                    "token":{
                      "serRefId":13
                    },
                    "num":{
                      "serId":17,
                      "value":{
                        "descriptor":"num",
                        "typeDefDescriptor":"aura://String",
                        "required":false,
                        "visibility":"PUBLIC"
                      }
                    }
                  }
                }
              },
              "action":{
                "exprType":"PROPERTY",
                "path":[
                  "c",
                  "locationChange"
                ]
              }
            }
          },
          {
            "serId":18,
            "value":{
              "eventDef":{
                "serId":19,
                "value":{
                  "descriptor":"markup://test:test_LocChng_Event2",
                  "type":"APPLICATION",
                  "superDef":{
                    "serRefId":11
                  },
                  "attributes":{
                    "customAttribute":{
                      "serId":20,
                      "value":{
                        "descriptor":"customAttribute",
                        "typeDefDescriptor":"aura://String",
                        "required":false,
                        "visibility":"PUBLIC"
                      }
                    },
                    "locator":{
                      "serId":21,
                      "value":{
                        "descriptor":"locator",
                        "typeDefDescriptor":"aura://String",
                        "required":false,
                        "visibility":"PUBLIC"
                      }
                    },
                    "token":{
                      "serRefId":13
                    }
                  }
                }
              },
              "action":{
                "exprType":"PROPERTY",
                "path":[
                  "c",
                  "locationChangeComposite"
                ]
              }
            }
          },
          {
            "serId":22,
            "value":{
              "eventDef":{
                "serRefId":11
              },
              "action":{
                "exprType":"PROPERTY",
                "path":[
                  "c",
                  "locationChangeGeneric"
                ]
              }
            }
          }
        ],
        "facets":[
          {
            "descriptor":"body",
            "value":[
              {
                "componentDef":{
                  "serId":23,
                  "value":{
                    "descriptor":"markup://test:test_button",
                    "controllerDef":{
                      "serId":24,
                      "value":{
                        "descriptor":"compound://test.test_button",
                        "actionDefs":[
                          {
                            "serId":25,
                            "value":{
                              "descriptor":"js://test.test_button/ACTION$press",
                              "name":"press",
                              "code":
function(cmp, event) {
        cmp.getEvent("press").fire();
    },
                              "actionType":"CLIENT"
                            }
                          }
                        ]
                      }
                    },
                    "superDef":{
                      "serId":26,
                      "value":{
                        "descriptor":"markup://aura:component",
                        "rendererDef":{
                          "serRefId":9
                        },
                        "attributeDefs":[
                          {
                            "serId":27,
                            "value":{
                              "descriptor":"body",
                              "typeDefDescriptor":"aura://Aura.Component[]",
                              "required":false,
                              "visibility":"PUBLIC"
                            }
                          }
                        ],
                        "interfaces":[
                          "markup://aura:rootComponent"
                        ],
                        "isAbstract":true
                      }
                    },
                    "attributeDefs":[
                      {
                        "serRefId":27
                      },
                      {
                        "serId":28,
                        "value":{
                          "descriptor":"label",
                          "typeDefDescriptor":"aura://String",
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      },
                      {
                        "serId":29,
                        "value":{
                          "descriptor":"class",
                          "typeDefDescriptor":"aura://String",
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      }
                    ],
                    "registerEventDefs":[
                      {
                        "serId":30,
                        "value":{
                          "eventDef":{
                            "serId":31,
                            "value":{
                              "descriptor":"markup://test:test_press",
                              "type":"COMPONENT",
                              "superDef":{
                                "serId":32,
                                "value":{
                                  "descriptor":"markup://aura:componentEvent",
                                  "type":"COMPONENT",
                                  "attributes":{

                                  }
                                }
                              },
                              "attributes":{

                              }
                            }
                          },
                          "attributeName":"press",
                          "isGlobal":false
                        }
                      }
                    ],
                    "facets":[
                      {
                        "descriptor":"body",
                        "value":[
                          {
                            "componentDef":{
                              "serId":33,
                              "value":{
                                "descriptor":"markup://aura:html",
                                "rendererDef":{
                                  "serId":34,
                                  "value":{
                                    "descriptor":"js://aura.html",
                                    "render":
function(component, helper) {
    	var placeholder = "auraplaceholder";
        var attributes = component.getAttributes();
        var valueProvider = attributes.getValueProvider();
        var replacements = {};
        var ret;

        var tag = attributes.get("tag");
        if ($A.util.isUndefinedOrNull(tag)) {
            $A.error("Undefined tag attribute for "+component.getGlobalId());
            tag = "div";
        }
        var HTMLAttributes = attributes.getValue("HTMLAttributes");
        
        
        var isIE7 = $A.get("$Browser.isIE7");
        if(isIE7 ===  true && tag == "input"){
        	var value = $A.expressionService.getValue(valueProvider, "v.name");
        	if($A.util.isEmpty(value)){
        		ret = document.createElement(tag);
        	}
        	else{
        		value = value.getValue();
        		ret = document.createElement('<input name="' + value + '">');
        	}
        }
        else{
        	ret = document.createElement(tag);
        }

        if (HTMLAttributes && HTMLAttributes.each) {
            
            HTMLAttributes.each(helper.createHtmlAttribute, { scope: helper, ret: ret, component: component });
        }

        if (ret.tagName.toLowerCase() === "a" && !ret.getAttribute("href")) {
            ret.setAttribute("href", "javascript:void(0);");
        }

        if (helper.canHaveBody(component)) {
            var body = attributes.getValue("body");
            $A.render(body, ret);
        }

        return ret;
    },
                                    "afterRender":
function(component, helper) {
        if (helper.canHaveBody(component)) {
            $A.afterRender(component.getAttributes().getValue("body"));
        }
    },
                                    "rerender":
function(component, helper) {
        var attributes = component.getAttributes();
        var valueProvider = attributes.getValueProvider();
        var element = component.getElement();
        if (!element) {
            return;
        }

        var expressionService = $A.expressionService;
        var HTMLAttributes = attributes.getValue("HTMLAttributes");
        if (HTMLAttributes && HTMLAttributes.each) {
            HTMLAttributes.each(function(name, ve) {
                
                
                if (ve.isExpression()) {
                    var lowerName = name.toLowerCase();
                    if (lowerName !== "height" && lowerName !== "width"
                            && lowerName !== "class"
                            && lowerName.indexOf("on") !== 0) {
                        var value = expressionService.getValue(valueProvider, ve);

                        if (value && value.isDirty()) {
                            var newValue;
                            var oldValue = element[helper.caseAttribute(lowerName)];

                            if (aura.util.arrayIndexOf(helper.SPECIAL_BOOLEANS, lowerName) > -1) {
                                newValue = value.getBooleanValue();
                            } else {
                                newValue = value.unwrap();
                            }

                            if (newValue !== oldValue) {
                            	helper.createHtmlAttribute(lowerName, newValue, { scope: helper, ret: element, component: component });
                            }
                        }
                    }
                }
            });

            var clz = HTMLAttributes.getValue("class");
            if (clz) {
                if (clz.isExpression()) {
                    clz = expressionService.getValue(valueProvider, clz);
                }
                if (clz.isDirty()) {

                    var c = clz.unwrap();
                    if (element.auraClass) {
                        c = c + " " + element.auraClass;
                    }
                    if (!$A.util.isUndefinedOrNull(c) && c !== element["className"]) {
                        element["className"] = c;
                    }
                }

            }
        }

        if (element.tagName.toLowerCase() === "a" && !element.getAttribute("href")) {
            element.setAttribute("href", "javascript:void(0);");
        }

        if (helper.canHaveBody(component)) {
            var body = attributes.getValue("body");
            $A.rerender(body, element, true);
        }
    },
                                    "unrender":
function(component, helper) {
        
        

        if (helper.canHaveBody(component)) {
            var attributes = component.getAttributes();
            var value = attributes.getValue('body');
            $A.unrender(value);
        }

        var elements = component.getElements();
        for (var key in elements) {
            var element = elements[key];
            aura.util.removeElement(element);
            delete elements[key];
        }
    }
                                  }
                                },
                                "helperDef":{
                                  "serId":35,
                                  "value":{
                                    "descriptor":"js://aura.html",
                                    "functions":{
                                      "isInputNullValue":
function(tagName, attributeName, value) {
        if (tagName && attributeName) {
            return tagName.toLowerCase() === "input" && attributeName.toLowerCase() === "value" && value === null;
        }
        return false;
    },
                                      "initFastClick":
function() {
        var self = this;
        if (!self.FastClick) {
            self.FastClick = function(element, handler) {
                this.element = element;
                this.handler = handler;

                element.addEventListener("touchstart", this, false);
            };

            self.FastClick.prototype.handleEvent = function(event) {
                switch (event.type) {
                case "touchstart":
                    this.onTouchStart(event);
                    break;
                case "touchmove":
                    this.onTouchMove(event);
                    break;
                case "touchend":
                    this.onClick(event);
                    break;
                }
            };

            self.FastClick.prototype.onTouchStart = function(event) {
                $A.util.on(this.element, "touchend", this, false);
                
                $A.util.on(this.element, "touchmove", this, false);

                this.startX = event.touches[0].clientX;
                this.startY = event.touches[0].clientY;
            };

            self.FastClick.prototype.onTouchMove = function(event) {
                if (Math.abs(event.touches[0].clientX - this.startX) > 4
                        || Math.abs(event.touches[0].clientY - this.startY) > 4) {
                    this.reset();
                }
            };

            self.FastClick.prototype.onClick = function(event) {
                event.stopPropagation();
                event.preventDefault();
                this.element.focus();
                this.handler(event);

                if (event.type == "touchend") {
                    self.FastClick.preventGhostClick(this.startX,
                            this.startY);
                }

                this.reset();
            };

            self.FastClick.prototype.reset = function() {
            	$A.util.removeOn(this.element, "touchend", this, false);
            	$A.util.removeOn(this.element, "touchmove", this, false);

                this.startX = 0;
                this.startY = 0;
            };

            self.FastClick.preventGhostClick = function(x, y) {
                self.FastClick.clickbusterCoordinates.push(x, y);
                window.setTimeout(self.FastClick.pop, 2500);
            };

            self.FastClick.pop = function() {
                self.FastClick.clickbusterCoordinates.splice(0, 2);
            };

            var onClickBuster = function(event) {
                for ( var i = 0; i < self.FastClick.clickbusterCoordinates.length; i += 2) {
                    var x = self.FastClick.clickbusterCoordinates[i];
                    var y = self.FastClick.clickbusterCoordinates[i + 1];
                    if (Math.abs(event.clientX - x) < 25
                            && Math.abs(event.clientY - y) < 25) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                }
            };

            self.FastClick.clickbusterCoordinates = [];
            $A.util.on(document, "click", onClickBuster, true);
        }
    },
                                      "createFastClickHandler":
function(element, handler) {
        var self = this;
        if (this.supportsTouchEvents()) {
            this.initFastClick();

            
            var FastClick = self.FastClick;
            var fc = new FastClick(element, handler);
        } else {
            $A.util.on(element, "click", handler);
        }
    },
                                      "supportsTouchEvents":
function() {
    	return $A.util.supportsTouchEvents();
    },
                                      "BODYLESS_TAGS":{
                                        "hr":true,
                                        "col":true,
                                        "keygen":true,
                                        "param":true,
                                        "link":true,
                                        "track":true,
                                        "img":true,
                                        "br":true,
                                        "embed":true,
                                        "meta":true,
                                        "input":true,
                                        "area":true,
                                        "source":true,
                                        "base":true,
                                        "command":true,
                                        "wbr":true
                                      },
                                      "caseAttribute":
function(attribute) {
        return this.SPECIAL_CASINGS()[attribute.toLowerCase()] !== undefined ? this.SPECIAL_CASINGS()[attribute.toLowerCase()] : attribute.toLowerCase();
    },
                                      "createHtmlAttribute":
function(name, ve, config) {
        var ret = config.ret;
        var component = config.component;
        var attributes = component.getAttributes();
        var valueProvider = attributes.getValueProvider();
        var on = $A.util.on;

        var value;
        
        if (name.toLowerCase().indexOf("on") === 0) {
            var eventName = name.substring(2);

            if (eventName.toLowerCase() === "click") {
                this.createFastClickHandler(ret, this.domEventHandler);
            } else {
                on(ret, eventName, this.domEventHandler);
            }
        } else {
            
            
            if (ve && ve.isExpression) {
            	if (ve.isExpression()) {
	                value = $A.expressionService.getValue(valueProvider, ve);

	                
	                if (value && value.auraType === "Value") {
	                    if (aura.util.arrayIndexOf(this.SPECIAL_BOOLEANS, name.toLowerCase()) > -1) {
	                        
	                        value = value.getBooleanValue();
	                    } else {
	                        value = value.getValue();
	                    }
	                }
            	} else {
                    value = ve.getValue();
            	}
            } else{
            	value = ve;
            }

            var isHash = value && value.indexOf && value.indexOf("#") === 0;
            if (name.toLowerCase() === "href" && ret.tagName && ret.tagName.toLowerCase() === "a" && value && (isHash || this.supportsTouchEvents())) {
                this.createFastClickHandler(ret, function() {
                    if (isHash) {
                        $A.run(function () { $A.historyService.set(value.substring(1)); })
                    } else {
                        
                        var HTMLAttributes = component.getValue("v.HTMLAttributes");
                        var target = HTMLAttributes.getValue("target");
                        if (target) {
                            if (target.isExpression()) {
                                target = $A.expressionService.getValue(valueProvider, target);
                            }
                            target = target.unwrap();
                        }
                        window.open(value, target ? target : "_self");
                    }
                });

                var href = "javascript:void(0";
                if ($A.getContext().getMode() !== "PROD") {
                    
                    
                    href += "/*" + value + "\u002A/";
                }
                href += ");";

                ret.setAttribute("href", href);
            } else if (name.toLowerCase() === "role" || name.lastIndexOf("aria-", 0) === 0) {
                
                ret.setAttribute(name, value);
            } else if (aura.util.arrayIndexOf(this.SPECIAL_BOOLEANS, name.toLowerCase()) > -1) {
                
            	var casedName = this.caseAttribute(name);
                if (value === false) {
                    ret.removeAttribute(casedName);
                } else {
                    ret.setAttribute(casedName, name);

                    
                    if (casedName === "checked"){
                    	ret.setAttribute("defaultChecked", true);
                	}
                }
            } else {
                
                
                
                if (!aura.util.isUndefined(value) && !($A.util.isIE && this.isInputNullValue(ret.tagName, name, value))) {
                	var casedAttribute = this.caseAttribute(name);
                    var lowerName = name.toLowerCase();
                    if (lowerName === "type" || lowerName === "href" || lowerName === "style" || lowerName.indexOf("data-") === 0) { 
                        ret.setAttribute(casedAttribute, value);
                    } else {
                        ret[casedAttribute] = value;
                    }
                }
            }
        }
    },
                                      "SPECIAL_CASINGS":
function() {
        if (this.cachedCasings) {
            return this.cachedCasings;
        } else {
            return this.cachedCasings = (function() {
                var ret = {};
                var caseSensitiveAttributes = ["readOnly",
                                               "colSpan",
                                               "rowSpan",
                                               "bgColor",
                                               "tabIndex",
                                               "useMap",
                                               "accessKey",
                                               "maxLength"
                                               ];
                var attr;
                for (var i=0, len=caseSensitiveAttributes.length; i<len; i++) {
                    attr = caseSensitiveAttributes[i];
                    ret[attr.toLowerCase()] = attr;
                }

                ret["for"] = "htmlFor";
                ret["class"] = "className";

                return ret;
            }());
        }
    },
                                      "SPECIAL_BOOLEANS":[
                                        "checked",
                                        "selected",
                                        "disabled",
                                        "readonly",
                                        "multiple",
                                        "ismap",
                                        "defer",
                                        "declare",
                                        "noresize",
                                        "nowrap",
                                        "noshade",
                                        "compact",
                                        "autocomplete",
                                        "required"
                                      ],
                                      "canHaveBody":
function(component) {
        var tag = component.get("v.tag");
        if ($A.util.isUndefinedOrNull(tag)) {
            $A.error("Undefined tag attribute for "+component.getGlobalId());
            return true;
        }
        return !this.BODYLESS_TAGS[tag.toLowerCase()];
    },
                                      "domEventHandler":
function(event) {
        var eventName = "on" + event.type;
        var element = event.currentTarget;
        var ownerComponent = $A.componentService.getRenderingComponentForElement(element);
        var attributes = ownerComponent.getAttributes();
        var valueProvider = attributes.getValueProvider();

        var htmlAttributes = attributes.getValue("HTMLAttributes");
        var valueExpression = htmlAttributes.getValue(eventName);

        if (eventName === "ontouchend") {
        	
            var onclickExpression = htmlAttributes.getValue("onclick");
            if (onclickExpression.isDefined()) {
            	if (!valueExpression.isDefined()) {
    	            
                	valueExpression = onclickExpression;
            	}
            }
        }

        $A.run(function () {
                var action = $A.expressionService.get(valueProvider, valueExpression);
                action.runDeprecated(event);
            })
    }
                                    }
                                  }
                                },
                                "attributeDefs":[
                                  {
                                    "serId":36,
                                    "value":{
                                      "descriptor":"body",
                                      "typeDefDescriptor":"aura://Aura.Component[]",
                                      "required":false,
                                      "visibility":"PUBLIC"
                                    }
                                  },
                                  {
                                    "serId":37,
                                    "value":{
                                      "descriptor":"tag",
                                      "typeDefDescriptor":"aura://String",
                                      "required":false,
                                      "visibility":"PUBLIC"
                                    }
                                  },
                                  {
                                    "serId":38,
                                    "value":{
                                      "descriptor":"HTMLAttributes",
                                      "typeDefDescriptor":"aura://Map",
                                      "required":false,
                                      "visibility":"PUBLIC"
                                    }
                                  }
                                ],
                                "interfaces":[
                                  "markup://aura:rootComponent"
                                ]
                              }
                            },
                            "attributes":{
                              "values":{
                                "body":{
                                  "descriptor":"body",
                                  "value":[
                                    {
                                      "componentDef":{
                                        "serId":39,
                                        "value":{
                                          "descriptor":"markup://aura:expression",
                                          "rendererDef":{
                                            "serId":40,
                                            "value":{
                                              "descriptor":"js://aura.expression",
                                              "render":
function(component, helper) {
        if(component.isRendered()){
            $A.unrender(component);
        }

        var ret;
        var value = component.getValue("v.value");
        var created = false;
        if (value) {
            if (value.auraType === "Component" || !value.isLiteral()) {
                
                ret = $A.render(value);
                created = true;
                component.lastRenderedValue = value;
            } else if (value.isDefined()) {
                
                ret = [document.createTextNode(helper.getTextValue(value))];
                created = true;
            }
        }

        if (!created){
            ret = [document.createTextNode("")];
        }

        return ret;
    },
                                              "afterRender":
function(component) {
        var value = component.getValue("v.value");
        if (value && (value.auraType === "Component" || !value.isLiteral())) {
            
            $A.afterRender(value);
        }
    },
                                              "rerender":
function(component, helper) {
        if (!component.isRendered()) {
            return;
        }

        var value = component.getValue("v.value");

        if (value) {
            if (value.auraType === "Component" || !value.isLiteral()) {
                var last = component.lastRenderedValue;
                if (last !== value) {
                    var referenceNode = value.getReferenceNode() || last.getReferenceNode();
                    $A.assert(referenceNode, "referenceNode is required");

                    
                    var tempReferenceNode = document.createComment("rerender expression: " + component);
                    $A.util.insertBefore(tempReferenceNode, referenceNode);
                    referenceNode = tempReferenceNode;

                    $A.unrender(last);

                    var ret = $A.render(value);
                    $A.util.insertBefore(ret, referenceNode);

                    
                    $A.util.removeElement(referenceNode);

                    component.lastRenderedValue = value;

                    $A.afterRender(value);
                } else {
                    $A.rerender(value);
                }
            } else {
                if (value.isDirty()){
                    
                    var element = component.getElement();

                    
                    if (element.parentNode) {
                        element.nodeValue = helper.getTextValue(value);
                    }
                }
            }
        }
	       },
                                              "unrender":
function(component) {
        
        var attributes = component.getAttributes();
        var value = attributes.getValue("value");
        if (value && (value.auraType === "Component" || !value.isLiteral())) {
            
            $A.unrender(value);
        }

        var elements = component.getElements();
        for(var key in elements){
            var element = elements[key];
            delete elements[key];
            $A.util.removeElement(element);
        }
    }
                                            }
                                          },
                                          "helperDef":{
                                            "serId":41,
                                            "value":{
                                              "descriptor":"js://aura.expression",
                                              "functions":{
                                                "getTextValue":
function(value) {
        var raw = value.unwrap();
        return $A.util.isUndefinedOrNull(raw) ? '' : raw;
    }
                                              }
                                            }
                                          },
                                          "attributeDefs":[
                                            {
                                              "serId":42,
                                              "value":{
                                                "descriptor":"value",
                                                "typeDefDescriptor":"aura://String",
                                                "required":false,
                                                "visibility":"PUBLIC"
                                              }
                                            }
                                          ],
                                          "interfaces":[
                                            "markup://aura:rootComponent"
                                          ]
                                        }
                                      },
                                      "attributes":{
                                        "values":{
                                          "value":{
                                            "descriptor":"value",
                                            "value":{
                                              "exprType":"PROPERTY",
                                              "path":[
                                                "v",
                                                "label"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "HTMLAttributes":{
                                  "descriptor":"HTMLAttributes",
                                  "value":{
                                    "class":{
                                      "exprType":"PROPERTY",
                                      "path":[
                                        "v",
                                        "class"
                                      ]
                                    },
                                    "onclick":{
                                      "exprType":"PROPERTY",
                                      "path":[
                                        "c",
                                        "press"
                                      ]
                                    }
                                  }
                                },
                                "tag":{
                                  "descriptor":"tag",
                                  "value":"div"
                                }
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "localId":"button",
                "attributes":{
                  "values":{
                    "class":{
                      "descriptor":"class",
                      "value":"SimpleComponent"
                    },
                    "press":{
                      "descriptor":"press",
                      "value":{
                        "exprType":"PROPERTY",
                        "path":[
                          "c",
                          "clientAction"
                        ]
                      }
                    },
                    "label":{
                      "descriptor":"label",
                      "value":"click me (Button on Simple Component)"
                    }
                  }
                }
              }
            ]
          }
        ],
        "locationChangeEventDef":{
          "serRefId":15
        }
      }
    },
    "globalId":"1"
  }
}