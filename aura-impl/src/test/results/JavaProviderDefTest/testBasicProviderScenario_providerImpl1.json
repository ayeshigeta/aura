{
  "serId":1,
  "value":{
    "componentDef":{
      "serId":2,
      "value":{
        "descriptor":"markup://test:test_Provider_providerImpl1",
        "superDef":{
          "serId":3,
          "value":{
            "descriptor":"markup://aura:component",
            "rendererDef":{
              "serId":4,
              "value":{
                "descriptor":"js://aura.component",
                "render":
function(component) {
        var body = component.getValue("v.body");
        var rendering = component.getRendering();
        return rendering ? rendering : $A.render(body);
    },
                "afterRender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.afterRender(body);
    },
                "rerender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.rerender(body);
    },
                "unrender":
function(component) {
        var body = component.getAttributes().getValue("body");
        $A.unrender(body);

        var elements = component.getElements();
        for (var key in elements){
            var element = elements[key];
            delete elements[key];
            aura.util.removeElement(element);
        }
    }
              }
            },
            "attributeDefs":[
              {
                "serId":5,
                "value":{
                  "descriptor":"body",
                  "typeDefDescriptor":"aura://Aura.Component[]",
                  "required":false,
                  "visibility":"PUBLIC"
                }
              }
            ],
            "interfaces":[
              "markup://aura:rootComponent"
            ],
            "isAbstract":true
          }
        },
        "attributeDefs":[
          {
            "serRefId":5
          },
          {
            "serId":6,
            "value":{
              "descriptor":"implNumber",
              "typeDefDescriptor":"aura://String",
              "required":false,
              "visibility":"PUBLIC"
            }
          },
          {
            "serId":7,
            "value":{
              "descriptor":"defaultAttr",
              "typeDefDescriptor":"aura://String",
              "defaultValue":{
                "descriptor":"defaultAttr",
                "value":"meh"
              },
              "required":false,
              "visibility":"PUBLIC"
            }
          },
          {
            "serId":8,
            "value":{
              "descriptor":"ComponentSpecificAttr",
              "typeDefDescriptor":"aura://String",
              "defaultValue":{
                "descriptor":"ComponentSpecificAttr",
                "value":"iammine"
              },
              "required":false,
              "visibility":"PUBLIC"
            }
          }
        ],
        "interfaces":[
          "markup://test:test_Provider_Interface"
        ],
        "facets":[
          {
            "descriptor":"body",
            "value":[
              {
                "componentDef":{
                  "serId":9,
                  "value":{
                    "descriptor":"markup://aura:text",
                    "rendererDef":{
                      "serId":10,
                      "value":{
                        "descriptor":"js://aura.text",
                        "render":
function(component) {
        var value = component.get("v.value");
        if ($A.util.isUndefined(value)) {
            value = '';
        } else if (!$A.util.isString(value)) {
            value = String(value);
        }
        var trunc = component.get("v.truncate");
        var truncateByWord = component.getAttributes().getValue("truncateByWord").getBooleanValue();
        var ellipsis = component.getAttributes().getValue("ellipsis").getBooleanValue();
        if(trunc){
            trunc = 1 * trunc;
            value = aura.util.truncate(value, trunc, ellipsis, truncateByWord);
        }
        return document.createTextNode(value);
    }
                      }
                    },
                    "attributeDefs":[
                      {
                        "serId":11,
                        "value":{
                          "descriptor":"value",
                          "typeDefDescriptor":"aura://String",
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      },
                      {
                        "serId":12,
                        "value":{
                          "descriptor":"truncate",
                          "typeDefDescriptor":"aura://Integer",
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      },
                      {
                        "serId":13,
                        "value":{
                          "descriptor":"truncateByWord",
                          "typeDefDescriptor":"aura://Boolean",
                          "defaultValue":{
                            "descriptor":"truncateByWord",
                            "value":false
                          },
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      },
                      {
                        "serId":14,
                        "value":{
                          "descriptor":"ellipsis",
                          "typeDefDescriptor":"aura://Boolean",
                          "defaultValue":{
                            "descriptor":"ellipsis",
                            "value":true
                          },
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      }
                    ],
                    "interfaces":[
                      "markup://aura:rootComponent"
                    ]
                  }
                },
                "attributes":{
                  "values":{
                    "value":{
                      "descriptor":"value",
                      "value":"\n    Implementation 1 "
                    }
                  }
                }
              },
              {
                "componentDef":{
                  "serId":15,
                  "value":{
                    "descriptor":"markup://aura:expression",
                    "rendererDef":{
                      "serId":16,
                      "value":{
                        "descriptor":"js://aura.expression",
                        "render":
function(component, helper) {
        if(component.isRendered()){
            $A.unrender(component);
        }

        var ret;
        var value = component.getValue("v.value");
        var created = false;
        if (value) {
            if (value.auraType === "Component" || !value.isLiteral()) {
                
                ret = $A.render(value);
                created = true;
                component.lastRenderedValue = value;
            } else if (value.isDefined()) {
                
                ret = [document.createTextNode(helper.getTextValue(value))];
                created = true;
            }
        }

        if (!created){
            ret = [document.createTextNode("")];
        }

        return ret;
    },
                        "afterRender":
function(component) {
        var value = component.getValue("v.value");
        if (value && (value.auraType === "Component" || !value.isLiteral())) {
            
            $A.afterRender(value);
        }
    },
                        "rerender":
function(component, helper) {
        if (!component.isRendered()) {
            return;
        }

        var value = component.getValue("v.value");

        if (value) {
            if (value.auraType === "Component" || !value.isLiteral()) {
                var last = component.lastRenderedValue;
                if (last !== value) {
                    var referenceNode = value.getReferenceNode() || last.getReferenceNode();
                    $A.assert(referenceNode, "referenceNode is required");

                    
                    var tempReferenceNode = document.createComment("rerender expression: " + component);
                    $A.util.insertBefore(tempReferenceNode, referenceNode);
                    referenceNode = tempReferenceNode;

                    $A.unrender(last);

                    var ret = $A.render(value);
                    $A.util.insertBefore(ret, referenceNode);

                    
                    $A.util.removeElement(referenceNode);

                    component.lastRenderedValue = value;

                    $A.afterRender(value);
                } else {
                    $A.rerender(value);
                }
            } else {
                if (value.isDirty()){
                    
                    var element = component.getElement();

                    
                    if (element.parentNode) {
                        element.nodeValue = helper.getTextValue(value);
                    }
                }
            }
        }
	       },
                        "unrender":
function(component) {
        
        var attributes = component.getAttributes();
        var value = attributes.getValue("value");
        if (value && (value.auraType === "Component" || !value.isLiteral())) {
            
            $A.unrender(value);
        }

        var elements = component.getElements();
        for(var key in elements){
            var element = elements[key];
            delete elements[key];
            $A.util.removeElement(element);
        }
    }
                      }
                    },
                    "helperDef":{
                      "serId":17,
                      "value":{
                        "descriptor":"js://aura.expression",
                        "functions":{
                          "getTextValue":
function(value) {
        var raw = value.unwrap();
        return $A.util.isUndefinedOrNull(raw) ? '' : raw;
    }
                        }
                      }
                    },
                    "attributeDefs":[
                      {
                        "serId":18,
                        "value":{
                          "descriptor":"value",
                          "typeDefDescriptor":"aura://String",
                          "required":false,
                          "visibility":"PUBLIC"
                        }
                      }
                    ],
                    "interfaces":[
                      "markup://aura:rootComponent"
                    ]
                  }
                },
                "attributes":{
                  "values":{
                    "value":{
                      "descriptor":"value",
                      "value":{
                        "exprType":"PROPERTY",
                        "path":[
                          "v",
                          "implNumber"
                        ]
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "original":"markup://test:test_Provider_Interface",
    "globalId":"5",
    "attributes":{
      "serId":19,
      "value":{
        "values":{
          "defaultAttr":"meh",
          "ComponentSpecificAttr":"iammine",
          "implNumber":"1"
        }
      }
    }
  }
}