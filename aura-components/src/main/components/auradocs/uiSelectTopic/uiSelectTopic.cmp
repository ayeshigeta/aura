<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Drop-down Lists"/>

	<ui:block>
		<aura:set attribute="left">
		    <p>Drop-down lists display a dropdown menu with available options. Both single and multiple selection are supported.
		    You can create a drop-down list using <code>ui:inputSelect</code>, which inherits the behavior and events from <code>ui:input</code>.
		  	
		    </p>
		</aura:set>
		<aura:set attribute="right">
		<b>Key Components</b><br/>
		<auradocs:defLink defType="component" descriptor="ui:inputSelect"/><br/><auradocs:defLink defType="component" descriptor="ui:inputSelectOption"/><br/><auradocs:defLink defType="component" descriptor="ui:inputSelectOptionGroup"/>
		</aura:set>
	</ui:block>
	<p>Here are a few basic ways to set up a drop-down list.</p>
	<p>For multiple selections, the default number of options displayed can be specified by the <code>size</code> attribute.
	</p>
	<h4>Single Selection</h4>
	<auradocs:codeblock>&lt;ui:inputSelect>
    &lt;ui:inputSelectOptionGroup label="Group 1">
        &lt;ui:inputSelectOption text="Red"/>
        &lt;ui:inputSelectOption text="Green" value="true"/>
        &lt;ui:inputSelectOption text="Blue"/>
    &lt;/ui:inputSelectOptionGroup>
    &lt;ui:inputSelectOptionGroup label="Group 2">
        &lt;ui:inputSelectOption text="Cyan"/>
        &lt;ui:inputSelectOption text="Magenta"/>
        &lt;ui:inputSelectOption text="Yellow"/>
    &lt;/ui:inputSelectOptionGroup>
&lt;/ui:inputSelect></auradocs:codeblock>

	<h4>Multiple Selection</h4>
	<auradocs:codeblock>&lt;ui:inputSelect multiple="true" size="5">
    &lt;ui:inputSelectOptionGroup label="Group 1">
        &lt;ui:inputSelectOption text="Red"/>
        &lt;ui:inputSelectOption text="Green" value="true"/>
        &lt;ui:inputSelectOption text="Blue"/>
    &lt;/ui:inputSelectOptionGroup>
    &lt;ui:inputSelectOptionGroup label="Group 2">
        &lt;ui:inputSelectOption text="Cyan"/>
        &lt;ui:inputSelectOption text="Magenta"/>
        &lt;ui:inputSelectOption text="Yellow"/>
    &lt;/ui:inputSelectOptionGroup>
&lt;/ui:inputSelect></auradocs:codeblock> 

	<p> The default selected value is specified by <code>value="true"</code>. Each option is represented by <code>ui:inputSelectOption</code>, which is nested in a <code>ui:inputSelectOptionGroup</code> component.</p>
	
	<h3>Generating Options Dynamically</h3>
	<p>To generate the options dynamically, use the method shown below.</p>
	<auradocs:codeblock>&lt;aura:component>
  &lt;aura:handler name="init" value="<aura:text value="{!"/>this}" action="<aura:text value="{!"/>c.doInit}"/>
  	&lt;ui:inputSelect label="Select me: " class="dynamic" aura:id="InputSelectDynamic" />
&lt;/aura:component> 
    </auradocs:codeblock>
    
    <p>The following client-side controller generates the options for the preceding <code>ui:inputSelect</code> component. Although it generates the options during initialization, the list of options can be modified anytime when you manipulate the list in 
    <code>v.options</code>. The component automatically updates itself and rerenders with the new options.</p>
    
    <auradocs:codeblock>
({
    doInit : function(cmp) {
        var opts = [
            { class: "optionClass", label: "Option1", value: "opt1", selected: "true" },
            { class: "optionClass", label: "Option2", value: "opt2" },
            { class: "optionClass", label: "Option3", value: "opt3" }
           
        ];
        cmp.find("InputSelectDynamic").setValue("v.options", opts);
    }
})
    </auradocs:codeblock>
    
    <h3>Generating Options with a Model</h3>
    <p>Display a list of options from a model by using the format <code>&lt;ui:inputSelect options="<aura:text value="{!"/>m.selectOptions}"/></code>, and creating the list of options in the model using <code>ArrayList&lt;InputOption></code>.</p>
    <p>The following code shows a model that generates a list of options for a <code>ui:inputSelect</code> component.</p>
    <auradocs:codeblock>@Model
    public class SizeModel {
    
    @AuraEnabled
    public List&lt;InputOption> getSizes() {
        ArrayList&lt;InputOption> a = new ArrayList&lt;InputOption>(3);
        InputOption m1 = new InputOption("Small", "s", false, "Small");
        a.add(m1);
        InputOption m2 = new InputOption("Medium", "m", false, "Medium");
        a.add(m2);
        InputOption m3 = new InputOption("Large", "l", false, "Large");
        a.add(m3);
        return a;
    }
}
    </auradocs:codeblock>
    
    <auradocs:codeblock>&lt;aura:component model="java://org.auraframework.docs.SizeModel">
    &lt;aura:attribute name="sizes" type="List" description="A list of input options."/>
    &lt;ui:inputSelect label="Size" options="<aura:text value="{!"/>m.sizes}"/>
&lt;aura:component>    
    </auradocs:codeblock>
    
    <h3>Working with Events</h3>
    <p>Common events for <code>ui:inputSelect</code> include the <code>change</code> and <code>click</code> events. For example, <code>change="<aura:text value="{!"/>c.onSelectChange}"</code>
    calls the client-side controller action with the fuction name, <code>onSelectChange</code>, when a user changes a selection. For a demo on drop-down lists, see the <ui:outputURL value="/auradocs#demos?demo=input" label="ui:input demo"/>.</p>
	<p>For more information on client-side controllers, see <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink>.</p>
	
	<h3>Styling Your Field-level Errors</h3>
	<p>The <code>ui:message</code> component is customizable with regular CSS styling. The following CSS sample adds a fixed width to the drop-down menu.
	</p>
	<auradocs:codeblock>.THIS.uiInputSelect {
    width: 200px;
}</auradocs:codeblock>
	<p>Alternatively, use the <code>class</code> attribute to specify your own CSS class.</p>
	
    <p><b>See also:</b><br/>
        <auradocs:topicLink topic="cmpCSS">CSS in Components</auradocs:topicLink>
    </p>	
	
</aura:component>


    