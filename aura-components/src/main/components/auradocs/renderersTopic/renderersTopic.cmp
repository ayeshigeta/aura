<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">

    <aura:set attribute="title" value="Renderers"/>

    <p>The Aura rendering service takes in-memory component state and updates the component in the Document Object Model (DOM). The DOM is the language-independent model for representing and interacting with objects in HTML and XML documents. Aura automatically renders your components so you don't have to know anything more about rendering unless you need to customize the default rendering behavior for a component.</p>

    <p>You should never modify the DOM outside a renderer. However, you can read from the DOM outside a renderer. For more information, see <auradocs:topicLink topic="domAccess">Accessing the DOM</auradocs:topicLink>.</p>

    <h2>Rendering Lifecycle</h2>

    <p>The rendering lifecycle automatically handles rendering and rerendering of components whenever the underlying data changes. Here is an outline of the rendering lifecycle.</p>

    <ol>
        <li>A browser event triggers one or more Aura events.</li>
        <li>Each Aura event triggers one or more actions that can update data. The updated data can fire more events.</li>
        <li>The rendering service tracks the stack of events that are fired.</li>
        <li>When all the data updates from the events are processed, the framework rerenders all the components that own modified data.</li>
    </ol>

    <h2>Base Component Rendering</h2>

    <p>The base component in Aura is <code>aura:component</code>. Every component extends this base component.</p>

    <p>The renderer for <code>aura:component</code> is in <code>componentRenderer.js</code>. This renderer has base implementations for the <code>render()</code>, <code>rerender()</code>, <code>afterRender()</code>, and <code>unrender()</code> functions. The framework calls these functions as part of the rendering lifecycle. We will learn more about them in this topic. You can override the base rendering functions in a custom renderer.</p>
    
    <auradocs:info>When you create a new component, Aura fires an <code>init</code> event, enabling you to update a component or fire an event after component construction but before rendering. See <auradocs:topicLink topic="initHandler">Invoking Actions on Component Initialization</auradocs:topicLink> for an example. The default renderer, <code>render()</code>, gets the component body and use the rendering service to render it.</auradocs:info>

    <h2>Creating a Renderer</h2>

    <p>You don't normally have to write a custom renderer, but if you want to customize rendering behavior, you can create a client-side renderer in a component bundle. A renderer file is part of the component bundle and is auto-wired if you follow the naming convention, <code>&lt;componentName&gt;Renderer.js</code>. For example, the renderer for <code>sample.cmp</code> would be in <code>sampleRenderer.js</code>.</p>

    <p>To reuse a renderer from another component, you can use the <code>renderer</code> system attribute in <code>aura:component</code> instead. For example, this component uses the auto-wired renderer for <code>auradocs.sampleComponent</code> in <code>auradocs/sampleComponent/sampleComponentRenderer.js</code>.
    </p>

<auradocs:codeblock><![CDATA[
<aura:component
    renderer="js://auradocs.sampleComponent">
    ...
</aura:component>]]>
</auradocs:codeblock>
     <auradocs:warning>If you are reusing a renderer from another component and you already have an auto-wired renderer in your component bundle, the methods in your auto-wired renderer will not be accessible.
         We recommend that you use a renderer  within the component bundle for maintainability and use an external renderer  only if you must.</auradocs:warning>

    <h2>Customizing Component Rendering</h2>

    <p>Customize rendering by creating a <code>render()</code> function in your component's renderer to override the base <code>render()</code> function, which updates the DOM.</p>

    <p>The <code>render()</code> function typically returns a DOM node, an array of DOM nodes, or nothing. The base HTML component expects DOM nodes when it renders a component.</p>

    <p>You generally want to extend default rendering by calling <code>superRender()</code> from your <code>render()</code> function before you add your custom rendering code. Calling <code>superRender()</code> creates the DOM nodes specified in the markup.</p>

    <auradocs:info>These guidelines are very important when you customize rendering.
    <ul>
        <li>A renderer should only modify DOM elements that are part of the component. You should never break component encapsulation by reaching in to another component and changing its DOM elements, even if you are reaching in from the parent component.</li>
        <li>A renderer should never fire an event. An alternative is to use an <auradocs:topicLink topic="initHandler">init event</auradocs:topicLink> instead.</li>
    </ul>
    </auradocs:info>

    <h2>Rerendering Components</h2>

    <p>When an event is fired, it may trigger actions to change data and call <code>rerender()</code> on affected components.
    The <code>rerender()</code> function enables components to update themselves based on updates to other components since they were last rendered. This function doesn't return a value.</p>

    <p>The framework automatically calls <code>rerender()</code> if you update a value object in a component. You only have to explicitly call <code>rerender()</code> if you haven't updated a value object but you still want to rerender the component.</p>

    <p>You generally want to extend default rerendering by calling <code>superRerender()</code> from your <code>renderer()</code> function before you add your custom rerendering code. Calling <code>superRerender()</code> chains the rerendering to the components in the <code>body</code> attribute.</p>

    <h2>Accessing the DOM After Rendering</h2>

    <p>The <code>afterRender()</code> function enables you to interact with the DOM tree after the Aura rendering service has inserted DOM elements. It's not necessarily the final call in the rendering lifecycle; it's simply called after <code>render()</code> and it doesn't return a value.</p>

    <p>If you want to use a library, such as jQuery, to access the DOM, use it in <code>afterRender()</code>.</p>

    <p>You generally want to extend default after rendering by calling <code>superAfterRender()</code> in your <code>afterRender()</code> function before you add your custom code.</p>
    
    <h2>Unrendering Components</h2>

    <p>The base <code>unrender()</code> function deletes all the DOM nodes rendered by a component's <code>render()</code> function. It is called by the framework when a component is being destroyed. Customize this behavior by overriding <code>unrender()</code> in your component's renderer. This can be useful when you are working with third-party libraries that are not native to the framework.</p>

    <p>You generally want to extend default unrendering by calling <code>superUnrender()</code> from your <code>unrender()</code> function before you add your custom code.</p>

    <h2>Rendering Example</h2>

    <p>Let's look at the button component to see how it customizes the base rendering behavior. It is important to know that every tag in Aura, including standard HTML tags, has an underlying Aura component representation. Therefore, the Aura rendering service uses the same process to render standard HTML tags or custom components that you create.</p>

    <p>View the source for <auradocs:defLink descriptor="ui:button">ui:button</auradocs:defLink>. Note that the button component includes a <code>disabled</code> attribute that enables Aura to track the disabled status for the component in a <code>Boolean</code>.</p>

<auradocs:codeblock><![CDATA[<aura:attribute name="disabled" type="Boolean" default="false"/>]]><br/>
</auradocs:codeblock>

    <p>In <code>button.cmp</code>, <code>onclick</code> is set to <code><aura:text value="{!"/>c.press}</code>.</p>

    <p>The renderer for the button component is <code>buttonRenderer.js</code>. The button component overrides the default <code>render()</code> function.</p>

<auradocs:codeblock>render : function(cmp, helper) {
    var ret = this.superRender();
    helper.updateDisabled(cmp);
    return ret;
},</auradocs:codeblock>

    <p>The first line calls the <code>superRender()</code> function to invoke the default rendering behavior. The <code>helper.updateDisabled(cmp)</code> call invokes a helper function to customize the rendering.</p>

    <p>Let's look at the <code>updateDisabled(cmp)</code> function in <code>buttonHelper.js</code>.</p>

<auradocs:codeblock>updateDisabled: function(cmp) {
    if (cmp.getAttributes().getValue("disabled")) {
        var disabled = cmp.getAttributes().getValue("disabled").getBooleanValue();
        var button = cmp.find("button");
        if (button) {
            var element = button.getElement();
            if (element) {
                if (disabled) {
                    element.setAttribute('disabled', 'disabled');
                } else {
                    element.removeAttribute('disabled');
                }
            }
        }
    }
}</auradocs:codeblock>

    <p>The <code>updateDisabled(cmp)</code> function translates the <code>Boolean</code> <code>disabled</code> value to the value expected in HTML, where the attribute doesn't exist or is set to <code>disabled</code>. </p>

    <p>It uses <code>cmp.find("button")</code> to retrieve a unique component. Note that <code>button.cmp</code> uses <code>aura:id="button"</code> to uniquely identify the component. <code>button.getElement()</code> returns the DOM element.</p>

    <p>The <code>rerender()</code> function in <code>buttonRenderer.js</code> is very similar to the <code>render()</code> function. Note that it also calls <code>updateDisabled(cmp)</code>.</p>

<auradocs:codeblock>rerender : function(cmp, helper){
    this.superRerender();
    helper.updateDisabled(cmp);
}</auradocs:codeblock>

      <h2>Ensuring client-side rendering</h2>
    <p>Aura calls the default server-side renderer by default, or a client-side renderer if you have one. If you want to ensure client-side rendering of a top-level component, append <code>render="client"</code> to the <code>aura:component</code> tag. Setting this in the top-level component will take precedence over Aura's detection logic, which takes dependencies into consideration.
    This is especially useful if you are testing the component directly in your browser and  want to inspect the component using the client-side framework when the test loads. Setting <code>render="client"</code> for test components ensures that the client-side framework is loaded, even though it normally wouldn't be needed.</p>
    <auradocs:info> Rendering components is part of the lifecycle of the framework and it's a bit trickier to demonstrate than some other concepts in Aura. The takeaway is that you don't need to think about it unless you need to customize the default rendering behavior for a component. If you are writing a renderer for a component, take a look at <auradocs:topicLink topic="valueObjects">value objects</auradocs:topicLink> to learn more about how Aura selectively rerenders and updates the UI in response to data changes.</auradocs:info>


    <p><b>See also:</b><br/>
    <auradocs:topicLink topic="compBundle">Component Bundles</auradocs:topicLink><br/>
    <auradocs:topicLink topic="helloEvents">Events</auradocs:topicLink><br/>
    <auradocs:topicLink topic="helper">Helpers</auradocs:topicLink><br/>
    <auradocs:topicLink topic="onchange">Detecting a Value Object Change</auradocs:topicLink><br/>
    <auradocs:topicLink topic="renderersServerSide">Server-Side Renderers</auradocs:topicLink>
    </p>
</aura:component>
